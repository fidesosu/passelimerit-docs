{
	"info": {
		"_postman_id": "902123df-db8f-4e6f-a27e-feabfbb9d1b5",
		"name": "Passelimerit",
		"description": "Complete collection of POST requests that the API supports",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34547149"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "send",
					"item": [
						{
							"name": "sendindvalues",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"ArtCode\": \"EU-maat tav\", \r\n  \"Values\": [ \r\n    { \r\n      \"EndValue\": 100.00, \r\n      \"CustomerId\": \"7da4cd44-9b49-4a35-8d1b-f339a68e7058\" \r\n    } \r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendindvalues",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendindvalues"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendinvoice2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Customer\": {\r\n    \"Id\": \"7da4cd44-9b49-4a35-8d1b-f339a68e7058\",\r\n    \"Name\": \"Example Customer\",\r\n    \"RegNo\": \"12345678\",\r\n    \"NotTDCustomer\": true,\r\n    \"VatRegNo\": \"EE123456789\",\r\n    \"CurrencyCode\": \"EUR\",\r\n    \"PaymentDeadLine\": 30,\r\n    \"OverDueCharge\": 1.25,\r\n    \"RefNoBase\": \"REF123456\",\r\n    \"Address\": \"123 Example Street\",\r\n    \"CountryCode\": \"EE\",\r\n    \"County\": \"Example County\",\r\n    \"City\": \"Example City\",\r\n    \"PostalCode\": \"12345\",\r\n    \"PhoneNo\": \"1234567890\",\r\n    \"PhoneNo2\": \"0987654321\",\r\n    \"HomePage\": \"example.com\",\r\n    \"Email\": \"customer@example.com\",\r\n    \"SalesInvLang\": \"EN\",\r\n    \"Contact\": \"John Doe\",\r\n    \"GLNCode\": \"1234567890\",\r\n    \"PartyCode\": \"EX123\",\r\n    \"EInvOperator\": 2,\r\n    \"EInvPaymId\": \"PAY123456\",\r\n    \"BankAccount\": \"EE123456789012345678\",\r\n    \"Dimensions\": [\r\n      {\r\n        \"DimensionId\": \"dim123\",\r\n        \"DimensionValue\": \"value123\"\r\n      }\r\n    ],\r\n    \"CustGrCode\": \"GRP123\",\r\n    \"ShowBalance\": true,\r\n    \"ApixEinv\": \"APIX123\",\r\n    \"GroupInv\": false\r\n  },\r\n  \"DocDate\": \"20240612\",\r\n  \"DueDate\": \"20240712\",\r\n  \"TransactionDate\": \"20240612\",\r\n  \"InvoiceNo\": \"123\",\r\n  \"RefNo\": \"INV123456\",\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"InvoiceRow\": [\r\n    {\r\n      \"Item\": {\r\n        \"Code\": \"ITEM123\",\r\n        \"Description\": \"Example Item\",\r\n        \"Type\": 1\r\n      },\r\n      \"Quantity\": 1,\r\n      \"Price\": 400.00,\r\n      \"TaxId\": \"973a4395-665f-47a6-a5b6-5384dd24f8d0\",\r\n      \"Dimensions\": [\r\n        {\r\n          \"DimensionId\": \"dim123\",\r\n          \"DimensionValue\": \"value123\"\r\n        }\r\n      ],\r\n      \"ItemCostAmount\": 400.00,\r\n      \"VatDate\": \"20240612\",\r\n      \"SalesAccCode\": \"SALES123\",\r\n      \"PurchaseAccCode\": \"PUR123\",\r\n      \"InventoryAccCode\": \"INV123\",\r\n      \"CostAccCode\": \"COST123\"\r\n    }\r\n  ],\r\n  \"TaxAmount\": [\r\n    {\r\n      \"TaxId\": \"973a4395-665f-47a6-a5b6-5384dd24f8d0\",\r\n      \"Amount\": 400.00\r\n    }\r\n  ],\r\n  \"RoundingAmount\": 0.50,\r\n  \"TotalAmount\": 400.00,\r\n  \"Payments\": [\r\n    {\r\n      \"PaymentMethod\": \"testaus\",\r\n      \"PaidAmount\": 100.00,\r\n      \"PaymDate\": \"20240612\"\r\n    }\r\n  ],\r\n  \"Hcomment\": \"Header comment\",\r\n  \"Fcomment\": \"Footer comment\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendinvoice2",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendinvoice2"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendglbatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DocNo\": \"testDocNo\",\r\n  \"BatchDate\": \"20200709\",\r\n  \"EntryRow\": [\r\n    {\r\n      \"AccountCode\": \"4010\",\r\n      \"DepartmentCode\": \"testCode1\",\r\n      \"Debit\": 0,\r\n      \"Credit\": 0,\r\n      \"ProjectCode\": \"hfif\",\r\n      \"Memo\": \"testMemo\"\r\n    }\r\n  ],\r\n  \"Attachment\": {\r\n    \"FileName\": \"dGVzdEZpbGVOYW1l\",\r\n    \"FileContent\": \"\"\r\n  },\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"CurrencyRate\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendglbatch",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendglbatch"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendoffer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Customer\": {\r\n    \"Name\": \"Hindre\",\r\n    \"PartyCode\": \"50055\",\r\n    \"SalesInvLang\": \"ET\",\r\n    \"NotTDCustomer\": false,\r\n    \"CountryCode\": \"EE\"\r\n  },\r\n  \"DocDate\": \"20200602\",\r\n  \"ExpireDate\": \"20200602\",\r\n  \"DeliveryDate\": \"20200606\",\r\n  \"DocType\": 2,\r\n  \"DocStatus\": 3,\r\n  \"ReserveItems\": false,\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"OfferNo\": \"MPO-2001\",\r\n  \"OfferRow\": [\r\n    {\r\n      \"Item\": {\r\n        \"EANCode\": \"094393450511\",\r\n        \"Description\": \"Udupeen Kaup\",\r\n        \"Type\": 3\r\n      },\r\n      \"Quantity\": 1.0,\r\n      \"Price\": 100.0,\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\"\r\n    }\r\n  ],\r\n    \"Payment\": {\r\n    \"PaymentMethod\": \"testaus\",\r\n    \"PaidAmount\": 100.0,\r\n    \"PaymDate\": \"20200602\"\r\n  },\r\n  \"TaxAmount\": [\r\n    {\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\",\r\n      \"Amount\": 20.0\r\n    }\r\n  ],\r\n  \"TotalAmount\": 100.0, \r\n  \"Hcomment\": \"säilivusaja tekst\",\r\n  \"Fcomment\": \"Kauba kohaletoimetamise tekst\",\r\n  \"ContactInfo\": \"Helista teisipäeval telefonile 123456789\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendoffer",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendoffer"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendinvmovement",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{     \r\n  \"DocDate\":\"20200831\",     \r\n  \"DocNo\":\"LL-4\",     \r\n  \"Location1Code\":\"1\",     \r\n  \"Location2Code\":\"2\",\r\n  \"DepartmentCode\":\"Netti\",     \r\n  \"Type\":3,     \r\n  \"Rows\": [     \r\n    {       \r\n      \"ArticleCode\":\"lamp\",\r\n      \"UOMName\": \"tk\",\r\n      \"ItemUnitCost\": 1.50,       \r\n      \"Quantity\": 10     \r\n    },     \r\n    {       \r\n    \"ArticleCode\":\"pirn60w\",\r\n    \"UOMName\": \"tk\",\r\n    \"ItemUnitCost\": 2.00,       \r\n    \"Quantity\": 10     \r\n    }    \r\n  ] \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendinvmovement",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendinvmovement"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get",
					"item": [
						{
							"name": "gettaxes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/gettaxes",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"gettaxes"
									]
								}
							},
							"response": []
						},
						{
							"name": "getprojects",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getprojects",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getprojects"
									]
								}
							},
							"response": []
						},
						{
							"name": "getcustomers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"7da4cd44-9b49-4a35-8d1b-f339a68e7058\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getcustomers",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getcustomers"
									]
								}
							},
							"response": []
						},
						{
							"name": "getaccounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"// console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											"// console.log('ApiId:', apiId);\r",
											"// console.log('Timestamp:', timestamp);\r",
											"// console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"// console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getaccounts",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getaccounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "getcostcenters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"// console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											"// console.log('ApiId:', apiId);\r",
											"// console.log('Timestamp:', timestamp);\r",
											"// console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"// console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getcostcenters",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getcostcenters"
									]
								}
							},
							"response": []
						},
						{
							"name": "getbanks",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"// console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											"// console.log('ApiId:', apiId);\r",
											"// console.log('Timestamp:', timestamp);\r",
											"// console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"// console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getbanks",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getbanks"
									]
								}
							},
							"response": []
						},
						{
							"name": "getdepartments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getdepartments",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getdepartments"
									]
								}
							},
							"response": []
						},
						{
							"name": "getunits",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getunits",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getunits"
									]
								}
							},
							"response": []
						},
						{
							"name": "getitems",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getitems",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getitems"
									]
								}
							},
							"response": []
						},
						{
							"name": "getcustdebtrep",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"CustName\": \"FirstCustomer Inc\",\r\n  \"CustId\": \"7da4cd44-9b49-4a35-8d1b-f339a68e7058\",\r\n  \"OverDueDays\": 5,\r\n  \"DebtDate\":\"20220501\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getcustdebtrep",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getcustdebtrep"
									]
								}
							},
							"response": []
						},
						{
							"name": "getprofitrep",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"EndDate\": \"20220908\",\r\n  \"PerCount\": 2,\r\n  \"DepFilter\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getprofitrep",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getprofitrep"
									]
								}
							},
							"response": []
						},
						{
							"name": "getbalancerep",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"EndDate\": \"20241231\",\r\n  \"PerCount\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getbalancerep",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getbalancerep"
									]
								}
							},
							"response": []
						},
						{
							"name": "getvendors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"Id\": \"01b7732d-ef2b-43a1-bb25-0ad715cf6b22\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getvendors",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getvendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "getglbatches",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"PeriodStart\": \"20200709\",\r\n  \"PeriodEnd\": \"20200710\",\r\n  \"UnPaid\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getglbatches",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getglbatches"
									]
								}
							},
							"response": []
						},
						{
							"name": "getglbatchesfull",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PeriodStart\": \"20200709\",\r\n  \"PeriodEnd\": \"20200710\",\r\n  \"WithLines\": 1,\r\n  \"WithCostAlloc\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getglbatchesfull",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getglbatchesfull"
									]
								}
							},
							"response": []
						},
						{
							"name": "getglbatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"Id\": \"40c9c00e-d1b4-487f-880a-59d9850bcb25\",\r\n  \"AddAttachment\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getglbatch",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getglbatch"
									]
								}
							},
							"response": []
						},
						{
							"name": "getpurchorders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Periodstart\": \"20200506\",\r\n  \"PeriodEnd\": \"20200506\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getpurchorders",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getpurchorders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "other",
					"item": [
						{
							"name": "test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/test",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteinvoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"d11bedc4-0c48-4d93-96b9-55e7da138702\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/deleteinvoice",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"deleteinvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateitem",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"c9a417e7-bf34-4443-9f11-daf0912e99df\",\r\n  \"Code\": \"\",\r\n  \"Description\": \"\",\r\n  \"SalesPrice\": 0,\r\n  \"ItemGrCode\": \"\",\r\n  \"DiscountPct\": 0,\r\n  \"EANCode\": \"\",\r\n  \"NameEN\": \"\",\r\n  \"LastPurchasePrice\": 0,\r\n  \"SalesAccountCode\": \"\",\r\n  \"InventoryAccountCode\": \"\",\r\n  \"ItemCostAccountCode\": \"\",\r\n  \"TaxId\": \"973a4395-665f-47a6-a5b6-5384dd24f8d0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/updateitem",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"updateitem"
									]
								}
							},
							"response": []
						},
						{
							"name": "updatecustomer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"7da4cd44-9b49-4a35-8d1b-f339a68e7058\",\r\n  \"Name\": \"FirstCustomer Inc\",\r\n  \"CountryCode\": \"FI\",\r\n  \"Address\": \"Merimiehenkatu 31\",\r\n  \"City\": \"Helsinki\",\r\n  \"PostalCode\": \"00100\",\r\n  \"PhoneNo\": \"6548765\",\r\n  \"PhoneNo2\": null,\r\n  \"Email\": \"\",\r\n  \"RegNo\": \"1122334755\",\r\n  \"VatRegNo\": \"11222344\",\r\n  \"SalesInvLang\": \"FI\",\r\n  \"RefNoBase\": \"1\",\r\n  \"EInvPaymId\": \"123456\",\r\n  \"EinvOperator\": 1,\r\n  \"Contact\": \"\",\r\n  \"ApixEinv\": \"123456\",\r\n  \"GroupInv\": false,\r\n  \"PaymentDeadLine\": 7,\r\n  \"Comments\": [\r\n    {\r\n      \"Comment\": \"This is a comment\",\r\n      \"CommDate\": \"20240528\"\r\n    }\r\n  ],\r\n  \"OverdueCharge\": 7.000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/updatecustomer",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"updatecustomer"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletepayment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"2a18e062-2f93-4abd-92d4-4a1570723972\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/deletepayment",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"deletepayment"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "send",
					"item": [
						{
							"name": "sendperinvoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"Customer\": {\r\n    \"Id\": \"7da4cd44-9b49-4a35-8d1b-f339a68e7058\"\r\n  },\r\n  \"InvoiceRow\": [\r\n    {\r\n      \"Item\": {\r\n        \"Code\": \"EU-maat tav\"\r\n      },\r\n      \"TaxId\": \"973a4395-665f-47a6-a5b6-5384dd24f8d0\"\r\n    }\r\n  ],\r\n  \"TaxAmount\": [\r\n    {\r\n      \"TaxId\": \"973a4395-665f-47a6-a5b6-5384dd24f8d0\"\r\n    }\r\n  ],\r\n  \"StartDate\": \"20190413\",\r\n  \"NextDate\": \"20190414\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendperinvoice",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendperinvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "senddiscounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Discounts\": [\r\n    {\r\n      \"TargetGroup\": 1,\r\n      \"TargetName\": \"testName\",\r\n      \"GroupType\": 1,\r\n      \"GroupCode\": \"testCode\",\r\n      \"DiscountPrc\": 0,\r\n      \"StartDate\": \"20200709\",\r\n      \"EndDate\": \"20200709\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/senddiscounts",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"senddiscounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "senddimensions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Dimensions\": [\r\n    {\r\n      \"Id\": 1,\r\n      \"Name\": \"Dimension 1\",\r\n      \"Type\": 1,\r\n      \"GenId\": 3,\r\n      \"PosNeg\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/senddimensions",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"senddimensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "senddimvalues",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Dimensions\": [\r\n    {\r\n      \"DimId\": 3,\r\n      \"DimValueId\": \"00000000-0000-0000-0000-000000000000\",\r\n      \"DimValueCode\": \"DimValueCode\",\r\n      \"DimValueName\": \"DimValueName\",\r\n      \"EndDate\": \"20240507\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/senddimvalues",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"senddimvalues"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendvendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Name\": \"test3\",\r\n  \"RegNo\": \"123223334\",\r\n  \"VatAccountable\": false,\r\n  \"VatRegNo\": \"1234234\",\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"PaymentDeadLine\": \"7\",\r\n  \"OverDueCharge\": \"10000.00\",\r\n  \"RefNoBase\": \"\",\r\n  \"Address\": \"Mikkolanti 44\",\r\n  \"CountryCode\": \"FI\",\r\n  \"County\": \"Finland\",\r\n  \"City\": \"Pori\",\r\n  \"PostalCode\": \"2800\",\r\n  \"PhoneNo\": \"5555555\",\r\n  \"PhoneNo2\": \"5555555\",\r\n  \"HomePage\": \"\",\r\n  \"Email\": \"tet@example.com\",\r\n  \"Dimensions\": [\r\n    {\r\n      \"DimId\": 100,\r\n      \"DimValueId\": \"\",\r\n      \"DimCode\": \"\"\r\n    }\r\n  ],\r\n  \"VendorType\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendvendor",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendvendor"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendprices",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Prices\": [\r\n    {\r\n      \"TargetGroup\": 1,\r\n      \"TargetName\": \"testName\",\r\n      \"ItemCode\": \"eu-maat tav\",\r\n      \"Price\": 0,\r\n      \"CurrencyCode\": \"EUR\",\r\n      \"DiscountAllowed\": true,\r\n      \"StartDate\": \"20200707\",\r\n      \"EndDate\": \"20200708\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendprices",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendprices"
									]
								}
							},
							"response": []
						},
						{
							"name": "senditems",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Items\": [\r\n    {\r\n      \"Type\": 3,\r\n      \"Usage\": 1,\r\n      \"Code\": \"testCode\",\r\n      \"Description\": \"testDescription\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/senditems",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"senditems"
									]
								}
							},
							"response": []
						},
						{
							"name": "senditemgroups",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{     \r\n  \"ItemGroups\":[\r\n    {\r\n      \"Code\": \"testCode1\",\r\n      \"Name\": \"testName8\"\r\n    },\r\n    {\r\n      \"Code\": \"testCode2\",\r\n      \"Name\": \"testName4\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/senditemgroups",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"senditemgroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendcustomer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Name\": \"Mart Mustikas\",\r\n  \"RegNo\": \"1232233234\",\r\n  \"NotTDCustomer\": false,\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"PaymentDeadLine\": 7,\r\n  \"OverDueCharge\": 0,\r\n  \"Address\": \"Kalda tee 10\",\r\n  \"City\": \"Morna Linn\",\r\n  \"County\": \"Pärnu maa\",\r\n  \"PostalCode\": \"80034\",\r\n  \"CountryCode\": \"EE\",\r\n  \"PhoneNo\": \"55555555\",\r\n  \"Email\": \"mart.mustikas@example.com\",\r\n  \"SalesInvLang\": \"ET\",\r\n  \"EInvOperator\": 1,\r\n  \"Dimensions\": [\r\n    {\r\n      \"DimId\": 2,\r\n      \"DimValueId\": \"7fc5f7f0-0537-4d64-b4cc-a8647bd217ac\",\r\n      \"DimCode\": \"hfif\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendcustomer",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendcustomer"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendinvoicebyemail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"6126680c-10eb-40eb-a496-7111de0ebe20\",\r\n  \"DelivNote\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendinvoicebyemail",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendinvoicebyemail"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendinvoiceaseinv",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"6126680c-10eb-40eb-a496-7111de0ebe20\",\r\n  \"DelivNote\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendinvoiceaseinv",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendinvoiceaseinv"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendtax",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Code\": \"taxcode\",\r\n  \"CodeEN\": \"taxcodeen\",\r\n  \"CodeSE\": \"taxcodese\",\r\n  \"CodeRU\": \"taxcoderu\",\r\n  \"Name\": \"taxname\",\r\n  \"NameEN\": \"taxnameen\",\r\n  \"NameSE\": \"taxnamese\",\r\n  \"NameRU\": \"taxnameru\",\r\n  \"TaxPct\": 10.00,\r\n  \"TaxType\": 12,\r\n  \"CountryCode\": \"FI\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendtax",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendtax"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendoffer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Customer\": {\r\n    \"Id\": \"7da4cd44-9b49-4a35-8d1b-f339a68e7058\",\r\n    \"Name\": \"Hindre\",\r\n    \"RegNo\": \"123456789\",\r\n    \"NotTDCustomer\": false,\r\n    \"VatRegNo\": \"EE123456789\",\r\n    \"CurrencyCode\": \"EUR\",\r\n    \"PaymentDeadLine\": 14,\r\n    \"OverDueCharge\": 10.00,\r\n    \"RefNoBase\": \"123456789\",\r\n    \"Address\": \"Tartu mnt 1\",\r\n    \"CountryCode\": \"EE\",\r\n    \"City\": \"Tallinn\",\r\n    \"PostalCode\": \"10111\",\r\n    \"PhoneNo\": \"123456789\",\r\n    \"PhoneNo2\": \"123456789\",\r\n    \"HomePage\": \"www.hindre.ee\",\r\n    \"Email\": \"\",\r\n    \"SalesInvLang\": \"ET\",\r\n    \"GLNCode\": \"123456789\",\r\n    \"PartyCode\": \"123456789\",\r\n    \"EInvOperator\": 1,\r\n    \"EInvPaymId\": \"123456789\",\r\n    \"BankAccount\": \"123456789\",\r\n    \"Dimensions\": [],\r\n    \"CustGrCode\": \"123456789\",\r\n    \"ShowBalance\": false\r\n  },\r\n  \"DocDate\": \"20200602\",\r\n  \"ExpireDate\": \"20200602\",\r\n  \"DeliveryDate\": \"20200606\",\r\n  \"DocType\": 2,\r\n  \"DocStatus\": 3,\r\n  \"ReserveItems\": false,\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"OfferNo\": \"MPO-2001\",\r\n  \"OfferRow\": [\r\n    {\r\n      \"Item\": {\r\n        \"EANCode\": \"094393450511\",\r\n        \"Description\": \"Udupeen Kaup\",\r\n        \"Type\": 3\r\n      },\r\n      \"Quantity\": 1.0,\r\n      \"Price\": 100.0,\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\"\r\n    }\r\n  ],\r\n  \"Payment\": {\r\n    \"PaymentMethod\": \"testaus\",\r\n    \"PaidAmount\": 100.0,\r\n    \"PaymDate\": \"20200602\"\r\n  },\r\n  \"TaxAmount\": [\r\n    {\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\",\r\n      \"Amount\": 20.0\r\n    }\r\n  ],\r\n  \"TotalAmount\": 100.0, \r\n  \"Hcomment\": \"säilivusaja tekst\",\r\n  \"Fcomment\": \"Kauba kohaletoimetamise tekst\",\r\n  \"ContactInfo\": \"Helista teisipäeval telefonile 123456789\",\r\n  \"Payer\": {\r\n    \"Name\": \"Hindre\",\r\n    \"RegNo\": \"123456789\",\r\n    \"NotTDCustomer\": false,\r\n    \"VatRegNo\": \"EE123456789\",\r\n    \"CurrencyCode\": \"EUR\",\r\n    \"PaymentDeadLine\": 14,\r\n    \"OverDueCharge\": 0.5,\r\n    \"RefNoBase\": \"123456789\",\r\n    \"Address\": \"Tartu mnt 1\",\r\n    \"CountryCode\": \"EE\",\r\n    \"County\": \"Harju\",\r\n    \"City\": \"Tallinn\",\r\n    \"PostalCode\": \"10111\",\r\n    \"PhoneNo\": \"123456789\",\r\n    \"PhoneNo2\": \"123456789\",\r\n    \"HomePage\": \"www.hindre.ee\",\r\n    \"Email\": \"\",\r\n    \"SalesInvLang\": \"ET\",\r\n    \"Contact\": \"Hindre\",\r\n    \"GLNCode\": \"123456789\",\r\n    \"PartyCode\": \"123456789\",\r\n    \"EInvOperator\": 1,\r\n    \"EInvPaymId\": \"123456789\",\r\n    \"BankAccount\": \"123456789\",\r\n    \"Dimensions\": [],\r\n    \"CustGrCode\": \"123456789\",\r\n    \"ShowBalance\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendoffer",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendoffer"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get",
					"item": [
						{
							"name": "getdimensions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getdimensions",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getdimensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "getitemgroups",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getitemgroups",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getitemgroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "getaccperiods",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getaccperiods",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getaccperiods"
									]
								}
							},
							"response": []
						},
						{
							"name": "getdiscounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getdiscounts",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getdiscounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "getprice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ItemCode\": \"testItem\",\r\n  \"CustomerId\": \"88d0362a-5e55-4184-b9ff-ace2a4f93da4\",\r\n  \"CustName\": \"Mari Maasikas\",\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"UOMName\": \"testUOM\",\r\n  \"DocDate\": \"20200707\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getprice",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getprice"
									]
								}
							},
							"response": []
						},
						{
							"name": "getpershaddress",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getpershaddress",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getpershaddress"
									]
								}
							},
							"response": []
						},
						{
							"name": "getperinvoices",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n  \"PeriodStart\": \"20190414\",   \r\n  \"PeriodEnd\": \"20190414\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getperinvoices",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getperinvoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "getperinvoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n  \"Id\": \"83d4d87b-9f10-4724-92b3-1c6115ab3ad5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getperinvoices",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getperinvoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "getlocations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getlocations",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getlocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "getprices",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getlocations",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getlocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "getoffers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PeriodStart\": \"20200602\",\r\n  \"PeriodEnd\": \"20200606\",\r\n  \"UnPaid\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getoffers",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getoffers"
									]
								}
							},
							"response": []
						},
						{
							"name": "getcustpaymrep",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CustName\": \"\",\r\n  \"PeriodStart\": \"20200707\",\r\n  \"PeriodEnd\": \"20200707\",\r\n  \"CurrncyCode\": \"EUR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getcustpaymrep",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getcustpaymrep"
									]
								}
							},
							"response": []
						},
						{
							"name": "getinventoryreport",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ArticleGroups\": [],\r\n  \"Location\": \"\",\r\n  \"RepDate\": \"20220908\",\r\n  \"ShowZero\": false,\r\n  \"WithReservations\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getinventoryreport",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getinventoryreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "getsalesrep",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"StartDate\": \"20000101\",\r\n  \"EndDate\": \"20240607\",\r\n  \"ReportType\": 4,\r\n  \"UserFilter\": \"\",\r\n  \"CustGrpFilter\": \"\",\r\n  \"CustFilter\": \"\",\r\n  \"ItemGrFilter\": [],\r\n  \"ItemFilter\": [],\r\n  \"DepartFilter\": [],\r\n  \"FixAssetFilter\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getsalesrep",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getsalesrep"
									]
								}
							},
							"response": []
						},
						{
							"name": "getpurchrep",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"StartDate\": \"20000101\",\r\n  \"EndDate\": \"20240607\",\r\n  \"ReportType\": 4,\r\n  \"VendChoice\": 1,\r\n  \"VendGrpFilter\": \"\",\r\n  \"VendFilter\": \"\",\r\n  \"ItemGrFilter\": \"\",\r\n  \"ItemFilter\": [],\r\n  \"DepartFilter\": [],\r\n  \"FixAssetFilter\": [],\r\n  \"ByEntryNo\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getpurchrep",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getpurchrep"
									]
								}
							},
							"response": []
						},
						{
							"name": "getpaymenttypes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Type\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getpaymenttypes",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getpaymenttypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "getsalesinvpdf",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"6126680c-10eb-40eb-a496-7111de0ebe20\",\r\n  \"DelivNote\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getsalesinvpdf",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getsalesinvpdf"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "other",
					"item": [
						{
							"name": "setofferstatus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"31fe26d0-7928-47f7-8702-2d066e332b77\",\r\n  \"NewStatus\": \"2\",\r\n  \"Comment\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/setofferstatus",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"setofferstatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "offer2inv",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"31fe26d0-7928-47f7-8702-2d066e332b77\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/offer2inv",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"offer2inv"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "both",
			"item": [
				{
					"name": "send",
					"item": [
						{
							"name": "sendinvoice (With Payment)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Customer\":{\r\n    \"Name\":\"Mari Maasikas\",\r\n    \"NotTDCustomer\":\"true\",\r\n    \"Address\":\"Tuleviku tee 6, Lohkva, Luunja vald, Tartumaa\",\r\n    \"CountryCode\":\"EE\",\r\n    \"PhoneNo\":\"\",\r\n    \"Email\":\"mari@example.com\"\r\n  },\r\n  \"DocDate\": \"20190413202154\",\r\n  \"DueDate\": \"20190413202154\",\r\n  \"InvoiceNo\": \"BL942019-PGG\",\r\n  \"RefNo\": \"\",\r\n  \"DepartmentCode\": \"\",\r\n  \"ProjectCode\": \"\",\r\n  \"InvoiceRow\": [{\r\n    \"item\": {\r\n      \"Code\": 1234567,\r\n      \"Description\": \"Bag of goldflakes\",\r\n      \"Type\": 3,\r\n      \"UOMName\": \"kg\"\r\n    },\r\n    \"Quantity\": 1,\r\n    \"Price\": 100,\r\n    \"DiscountPct\": 0,\r\n    \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\"\r\n   }],\r\n  \"TaxAmount\": [{\r\n    \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\"\r\n  }],\r\n  \"RoundingAmount\": 0,\r\n  \"TotalAmount\": 100,\r\n  \"Payment\": {\r\n    \"PaymentMethod\": \"testaus\",\r\n    \"PaidAmount\": \"100\",\r\n    \"PaymDate\": \"20190413202154\"\r\n  },\r\n  \"HComment\": \"\",\r\n  \"FComment\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendinvoice",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendinvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendinvoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Customer\": {\r\n    \"Name\": \"FirstCustomer Inc\",\r\n    \"RegNo\": \"1122334755\",\r\n    \"NotTDCustomer\": false,\r\n    \"VatRegNo\": \"11222344\",\r\n    \"CurrencyCode\": \"EUR\",\r\n    \"PaymentDeadLine\": 7,\r\n    \"OverDueCharge\": 0,\r\n    \"RefNoBase\": 1,\r\n    \"Address\": \"Merimiehenkatu 31\",\r\n    \"CountryCode\": \"FI\",\r\n    \"County\": \"Finland\",\r\n    \"City\": \"Helsinki\",\r\n    \"PostalCode\": \"\",\r\n    \"PhoneNo\": \"6548765\",\r\n    \"PhoneNo2\": \"\",\r\n    \"HomePage\": \"\",\r\n    \"Email\": \"customermail@gmail.com\"\r\n  },\r\n  \"DocDate\": \"20170113131239\",\r\n  \"DueDate\": \"20170125131239\",\r\n  \"InvoiceNo\": \"123\",\r\n  \"RefNo\": \"1232\",\r\n  \"DepartmentCode\": \"\",\r\n  \"ProjectCode\": \"\",\r\n  \"InvoiceRow\": [\r\n    {\r\n      \"Item\": {\r\n        \"Code\": \"1234567\",\r\n        \"Description\": \"Bag of goldflakes\",\r\n        \"Type\": 3,\r\n        \"UOMName\": \"kg\"\r\n      },\r\n      \"Quantity\": 2.00,\r\n      \"Price\": 1000.00,\r\n      \"DiscountPct\": 0,\r\n      \"DiscountAmount\": 0.00,\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\",\r\n      \"LocationCode\": \"1\"\r\n    }\r\n  ],\r\n  \"TotalAmount\": 2000.00,\r\n  \"RoundingAmount\": 0.00,\r\n  \"TaxAmount\": [\r\n    {\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\",\r\n      \"Amount\": 400.00\r\n    }\r\n  ],\r\n  \"Payment\": {\r\n    \"PaymentMethod\": \"testaus\",\r\n    \"PaidAmount\": \"100\",\r\n    \"PaymDate\": \"20190413202154\"\r\n  },\r\n    \"Dimensions\": [\r\n    {\r\n      \"DimId\": 2,\r\n      \"DimValueId\": \"7fc5f7f0-0537-4d64-b4cc-a8647bd217ac\",\r\n      \"DimCode\": \"hfif\"\r\n    }\r\n  ],\r\n  \"HComment\": \"\",\r\n  \"FComment\": \"\",\r\n  \"Payer\": {\r\n    \"Name\": \"Payerthing\",\r\n    \"RegNo\": \"\",\r\n    \"NotTDCustomer\": false,\r\n    \"VatRegNo\": \"\",\r\n    \"CurrencyCode\": \"\",\r\n    \"PaymentDeadLine\": 7,\r\n    \"OverDueCharge\": 0,\r\n    \"RefNoBase\": 1,\r\n    \"Address\": \"\",\r\n    \"CountryCode\": \"FI\",\r\n    \"County\": \"\",\r\n    \"City\": \"\",\r\n    \"PostalCode\": \"\",\r\n    \"PhoneNo\": \"\",\r\n    \"PhoneNo2\": \"\",\r\n    \"HomePage\": \"\",\r\n    \"Email\": \"\",\r\n    \"SalesInvLang\": \"\",\r\n    \"Contact\": \"\",\r\n    \"GLNCode\": \"\",\r\n    \"PartyCode\": \"\",\r\n    \"EInvOperator\": 1,\r\n    \"EInvPaymId\": \"\",\r\n    \"BankAccount\": \"\",\r\n    \"Dimensions\": [],\r\n    \"CustGrCode\": \"\",\r\n    \"ShowBalance\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendinvoice",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendinvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendpurchinvoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Vendor\": {\r\n    \"Name\": \"Mingi Firma AS\",\r\n    \"RegNo\": \"123456789\",\r\n    \"VatRegNo\": \"EE123456789\",\r\n    \"CurrencyCode\": \"EUR\",\r\n    \"PaymentDeadLine\": \"7\",\r\n    \"OverDueCharge\": \"0\",\r\n    \"RefNoBase\": \"1\",\r\n    \"Address\": \"Mingi Tänav 5\",\r\n    \"County\": \"Estonia\",\r\n    \"CountryCode\": \"EE\",\r\n    \"City\": \"Keskus, Pealinnas\",\r\n    \"PostalCode\": \"75306\",\r\n    \"PhoneNo\": \"\",\r\n    \"PhoneNo2\": \"\",\r\n    \"Email\": \"\"\r\n  },\r\n  \"ExpenseClaim\": false,\r\n  \"DocDate\": \"20200506\",\r\n  \"DueDate\": \"20200506\",\r\n  \"TransactionDate\": \"20200506\",\r\n  \"BillNo\": \"987654324\",\r\n  \"RefNo\": null,\r\n  \"BankAccount\": \"\",\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"InvoiceRow\": [\r\n    {\r\n      \"Dimensions\": [\r\n        {\r\n          \"DimId\": 2,\r\n          \"DimValueId\": \"7fc5f7f0-0537-4d64-b4cc-a8647bd217ac\",\r\n          \"DimCode\": \"hfif\"\r\n        }\r\n      ],\r\n      \"Item\": {\r\n        \"Code\": \"ENVOICE_SERVICE\",\r\n        \"Description\": \"Rehvivahetuse ettemaks\",\r\n        \"Type\": 2,\r\n        \"UOMName\": null\r\n      },\r\n      \"Quantity\": 1,\r\n      \"Price\": 380.0,\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\",\r\n      \"GLAccountCode\": \"1531\",\r\n      \"CostCenterCode\": \"testCostCenterCode\"\r\n    }\r\n  ],\r\n  \"TaxAmount\": [\r\n    {\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\",\r\n      \"Amount\": 0.20\r\n    }\r\n  ],\r\n  \"Payment\": {\r\n    \"PaymentMethod\": \"testaus\",\r\n    \"PaidAmount\": 380.00,\r\n    \"PaymDate\": \"202406031240\"\r\n  },\r\n  \"Attachment\": {\r\n    \"FileName\": \"ZmlsZS5wZGY=\",\r\n    \"FileContent\": \"YmFzZTY0\"\r\n  },\r\n  \"Receiver\": {\r\n    \"Id\": \"01b7732d-ef2b-43a1-bb25-0ad715cf6b22\",\r\n    \"Name\": \"Mingi Firma AS\",\r\n    \"RegNo\": \"123456789\",\r\n    \"VatAccountable\": true,\r\n    \"VatRegNo\": \"EE123456789\",\r\n    \"CurrencyCode\": \"EUR\",\r\n    \"PaymentDeadLine\": 7,\r\n    \"OverDueCharge\": 0,\r\n    \"Address\": \"Mingi Tänav 5\",\r\n    \"City\": \"Keskus, Pealinnas\",\r\n    \"County\": \"Estonia\",\r\n    \"PostalCode\": \"75306\",\r\n    \"CountryCode\": \"EE\",\r\n    \"PhoneNo\": \"\",\r\n    \"PhoneNo2\": \"\",\r\n    \"HomePage\": \"\",\r\n    \"Email\": \"\"\r\n  },\r\n  \"TotalAmount\": 380.00,\r\n  \"Hcomment\": null,\r\n  \"Fcomment\": \"Ülemuse autol veel vahetamata\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendpurchinvoice",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendpurchinvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendpurchorder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PolDocType\": 1,\r\n  \"Vendor\": {\r\n    \"Name\": \"VendorName\",\r\n    \"RegNo\": \"12345678\",\r\n    \"VatAccountable\": true,\r\n    \"VatRegNo\": \"12345678\",\r\n    \"CurrencyCode\": \"EUR\",\r\n    \"PaymentDeadLine\": 7,\r\n    \"OverDueCharge\": 0,\r\n    \"Address\": \"VendorAddress\",\r\n    \"City\": \"VendorCity\",\r\n    \"County\": \"VendorCounty\",\r\n    \"PostalCode\": \"12345\",\r\n    \"CountryCode\": \"FI\",\r\n    \"PhoneNo\": \"123456789\",\r\n    \"PhoneNo2\": \"123456789\",\r\n    \"HomePage\": \"www.vendor.com\",\r\n    \"Email\": \"\"\r\n  },\r\n  \"DocDate\": \"20200506\",\r\n  \"DueDate\": \"20200506\",\r\n  \"BillNo\": \"8888\",\r\n  \"RefNo\": \"8888\",\r\n  \"BankAccount\": \"FI123456789\",\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"DepartmentCode\": \"\",\r\n  \"InvoiceRow\": [\r\n    {\r\n      \"Item\": {\r\n        \"Code\": \"1234567\",\r\n        \"Description\": \"Bag of goldflakes\",\r\n        \"Type\": 3,\r\n        \"UOMName\": \"kg\"\r\n      },\r\n      \"Quantity\": 2.00,\r\n      \"Price\": 1000.00,\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\",\r\n      \"LocationCode\": \"1\"\r\n    }\r\n  ],\r\n  \"TaxAmount\": [\r\n    {\r\n      \"TaxId\": \"b9b25735-6a15-4d4e-8720-25b254ae3d21\",\r\n      \"Amount\": 400.00\r\n    }\r\n  ],\r\n  \"RoundingAmount\": 0.00,\r\n  \"TotalAmount\": 2000.00,\r\n  \"Payment\": {\r\n    \"PaymentMethod\": \"Nordea\",\r\n    \"PaidAmount\": \"100\",\r\n    \"PaymDate\": \"20200506\"\r\n  },\r\n  \"Hcomment\": \"\",\r\n  \"Fcomment\": \"\",\r\n  \"Attachment\": {\r\n    \"FileName\": \"invoice.pdf\",\r\n    \"FileContent\": \"Base64EncodedPDF\"\r\n  },\r\n  \"ExpenseClaim\": false,\r\n  \"Dimensions\": [\r\n    {\r\n    \"DimId\": 2,\r\n    \"DimValueId\": \"7fc5f7f0-0537-4d64-b4cc-a8647bd217ac\",\r\n    \"DimCode\": \"hfif\"\r\n    }\r\n  ],\r\n  \"Receiver\": {\r\n    \"Name\": \"ReceiverName\",\r\n    \"RegNo\": \"12345678\",\r\n    \"VatAccountable\": true,\r\n    \"VatRegNo\": \"12345678\",\r\n    \"CurrencyCode\": \"EUR\",\r\n    \"PaymentDeadLine\": 7,\r\n    \"OverDueCharge\": 0,\r\n    \"Address\": \"ReceiverAddress\",\r\n    \"City\": \"ReceiverCity\",\r\n    \"County\": \"ReceiverCounty\",\r\n    \"PostalCode\": \"12345\",\r\n    \"CountryCode\": \"FI\",\r\n    \"PhoneNo\": \"123456789\",\r\n    \"PhoneNo2\": \"123456789\",\r\n    \"HomePage\": \"www.receiver.com\",\r\n    \"Email\": \"\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendpurchorder",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendpurchorder"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendpayment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"// console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											"// console.log('ApiId:', apiId);\r",
											"// console.log('Timestamp:', timestamp);\r",
											"// console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"// console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"BankId\": \"93f8d710-d0d2-4e9c-8c66-c2f669a1885d\",\r\n  \"IBAN\": \"FI32 3623 6540 0065 56\",\r\n  \"CustomerName\": \"FirstCustomer Inc\",\r\n  \"InvoiceNo\": \"123\",\r\n  \"PaymentDate\": \"20240529\",\r\n  \"RefNo\": \"1232\",\r\n  \"Amount\": \"2000.00\",\r\n  \"CurrencyCode\": \"EUR\",\r\n  \"CurrencyRate\": \"1.0000000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendpayment",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendpayment"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendpaymentv",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"BankId\": \"93f8d710-d0d2-4e9c-8c66-c2f669a1885d\",\r\n  \"IBAN\": \"FI32 3623 6540 0065 56\",\r\n  \"VendorName\": \"test\",\r\n  \"PaymentDate\": \"20240529\",\r\n  \"BillNo\": \"12345\",\r\n  \"RefNo\": \"1232\",\r\n  \"Amount\": \"10000.00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendPaymentV",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendPaymentV"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendpaymento",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											" console.log('ApiId:', apiId);\r",
											" console.log('Timestamp:', timestamp);\r",
											" console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"BankId\": \"93f8d710-d0d2-4e9c-8c66-c2f669a1885d\",\r\n  \"IBAN\": \"FI32 3623 6540 0065 56\",\r\n  \"CustomerName\": \"FirstCustomer Inc\",\r\n  \"PaymentDate\": \"201701250000\",\r\n  \"RefNo\": \"1232\",\r\n  \"Amount\": 2000.00\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/sendpaymento",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"sendpaymento"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get",
					"item": [
						{
							"name": "getinvoices",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"// console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											"// console.log('ApiId:', apiId);\r",
											"// console.log('Timestamp:', timestamp);\r",
											"// console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"// console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"Periodstart\": 20170113, \r\n  \"PeriodEnd\": 20170113,\r\n  \"UnPaid\": true \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getinvoices",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getinvoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "getinvoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"// console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											"// console.log('ApiId:', apiId);\r",
											"// console.log('Timestamp:', timestamp);\r",
											"// console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"// console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"Id\":  \"d11bedc4-0c48-4d93-96b9-55e7da138702\",\r\n   \"AddAttachment\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getinvoice",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getinvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "getpayments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"// console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											"// console.log('ApiId:', apiId);\r",
											"// console.log('Timestamp:', timestamp);\r",
											"// console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"// console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"PeriodStart\": \"20190413\",\r\n  \"PeriodEnd\": \"20190414\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getpayments",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getpayments"
									]
								}
							},
							"response": []
						},
						{
							"name": "getpurchorder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"// console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											"// console.log('ApiId:', apiId);\r",
											"// console.log('Timestamp:', timestamp);\r",
											"// console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"// console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"Id\": \"5312a13d-64ad-4032-b523-d81c420d246a\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/getpurchorder",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"getpurchorder"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "other",
					"item": [
						{
							"name": "updatevendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTimestamp = () => {\r",
											"  var currentDate = new Date();\r",
											"  var formattedDate =\r",
											"    currentDate.getFullYear().toString().padStart(4, '0') +\r",
											"    (currentDate.getMonth() + 1).toString().padStart(2, '0') +\r",
											"    currentDate.getDate().toString().padStart(2, '0') +\r",
											"    currentDate.getHours().toString().padStart(2, '0') +\r",
											"    currentDate.getMinutes().toString().padStart(2, '0') +\r",
											"    currentDate.getSeconds().toString().padStart(2, '0');\r",
											"  return formattedDate;\r",
											"}\r",
											" \r",
											"let requestData = request.data\r",
											"if (requestData instanceof Object) requestData = ''\r",
											"// console.clear();\r",
											"// console.log('Request data:', requestData);\r",
											" \r",
											"const apiId = pm.variables.get(\"apiId\");\r",
											"const apiKey = pm.variables.get('apiKey');\r",
											"const timestamp = getTimestamp();\r",
											"const dataString = apiId + timestamp + requestData;\r",
											" \r",
											"const hash = CryptoJS.HmacSHA256(dataString, apiKey);\r",
											"const signature = CryptoJS.enc.Base64.stringify(hash);\r",
											" \r",
											"// console.log('ApiId:', apiId);\r",
											"// console.log('Timestamp:', timestamp);\r",
											"// console.log('ApiKey:', apiKey);\r",
											"// console.log('\\n');\r",
											" \r",
											"// console.log('Data:', dataString);\r",
											"// console.log('Signature:', signature);\r",
											" \r",
											"const encodedSignature = encodeURIComponent(signature);\r",
											" \r",
											"pm.request.url.addQueryParams([\r",
											"  { key: \"apiid\", value: apiId },\r",
											"  { key: \"timestamp\", value: timestamp },\r",
											"  { key: \"signature\", value: encodedSignature }\r",
											"]);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"01b7732d-ef2b-43a1-bb25-0ad715cf6b22\",\r\n  \"Name\": \"Test\",\r\n  \"CountryCode\": \"EE\",\r\n  \"Address\": \"Test\",\r\n  \"City\": \"Test\",\r\n  \"PostalCode\": \"12345\",\r\n  \"PhoneNo\": \"123456\",\r\n  \"PhoneNo2\": \"123456\",\r\n  \"Email\": \"\",\r\n  \"RegNo\": \"123456\",\r\n  \"VatRegNo\": \"123456\",\r\n  \"SalesInvLang\": \"EE\",\r\n  \"VatAccountable\": true,\r\n  \"BankAccount\": \"123456\",\r\n  \"ReferenceNo\": \"123456\",\r\n  \"Dimensions\": [\r\n    {\r\n      \"DimId\": 2,\r\n      \"DimValueId\": \"7fc5f7f0-0537-4d64-b4cc-a8647bd217ac\",\r\n      \"DimCode\": \"1\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseUrl}}/{{apiPath}}/updatevendor",
									"protocol": "https",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{apiPath}}",
										"updatevendor"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}